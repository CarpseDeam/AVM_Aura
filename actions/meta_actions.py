# foundry/actions/meta_actions.py
"""
Contains meta-programming actions that create or modify the AVM's own code.
"""
import logging
from pathlib import Path

logger = logging.getLogger(__name__)


def create_new_tool(tool_name: str, description: str, parameters_json: str, action_function_name: str) -> str:
    """
    Generates and writes a new blueprint .py file to the blueprints/ directory.
    This allows the AVM to create new tools for itself dynamically.
    """
    logger.info(f"Executing Genesis Tool: Creating blueprint for '{tool_name}'")
    # MODIFIED: Changed the template to use action_function_name
    blueprint_code = f'''# blueprints/{tool_name}_bp.py
# This file was auto-generated by the AVM's create_new_tool blueprint.
from foundry.blueprints import Blueprint

# Parameters schema for the LLM, provided by the Genesis prompt
params = {parameters_json}

blueprint = Blueprint(
    id="{tool_name}",
    description="{description}",
    parameters=params,
    action_function_name="{action_function_name}"
)
'''
    file_path = f"blueprints/{tool_name}_bp.py"
    try:
        path_obj = Path(file_path)
        path_obj.write_text(blueprint_code, encoding='utf-8')

        success_message = (
            f"SUCCESS: Blueprint '{file_path}' created!\\n"
            f"NEXT STEPS:\\n"
            f"1. Manually create the action file and function '{action_function_name}' in foundry/actions/.\\n"
            f"2. Restart the AVM to load the new tool."
        )
        logger.info(success_message.replace('\\n', ' '))
        return success_message
    except Exception as e:
        error_message = f"ERROR: Failed to create new tool file for '{tool_name}': {e}"
        logger.exception(error_message)
        return error_message